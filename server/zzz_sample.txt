


client 
  src
   components
    list.jsx
server
public/images/uploads
 controllers
   authController.js
   productController.js
   userController.js
 models
   Product.js
   User.js
 routes
   productRoute.js
   userRoute.js
 uploads
 utils
   multerUploadImage.js




   // const { cloudinaryUploadImg, cloudinaryDeleteImg } = require("../utils/cloudinary");

const uploadImages = async (req, res) => {
  try {
    const uploader = (path) => cloudinaryUploadImg(path, "images");
    const urls = [];
    const files = req.files || [];
    for (const file of files) {
      const { path } = file;
      const newpath = await uploader(path);
      urls.push(newpath);
      fs.unlinkSync(path);
    }
    res.json(urls);
  } catch (error) {
    console.error("Error uploading images:", error);
    res.status(500).json({ message: "Failed to upload images." });
  }
};

// Delete images
const deleteImages = async (req, res) => {
  const { id } = req.params;
  try {
    await cloudinaryDeleteImg(id, "images");
    res.json({ message: "Deleted image" });
  } catch (error) {
    console.error("Error deleting images:", error);
    res.status(500).json({ message: "Failed to delete images." });
  }
};






import React, { useState } from 'react'
import { useDispatch } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { createProduct } from '../features/productSlice';

const CreateProducts = () => {
    const navigate = useNavigate();
    const dispatch = useDispatch();
    const [product, setProduct] = useState({
      name: "",
      description: "",
      price: 0,
      category: "",
      inStock: true,
      tags: [],
      isFeatured: false,
      images: [],
    });
  
    const handleChange = (e) => {
      const { name, value } = e.target;
      if (name === "tags") {
        setProduct({ ...product, [name]: value.split(",") });
      } else {
        setProduct({ ...product, [name]: value });
      }
    };
  
    const handleImageChange = (e) => {
      const files = Array.from(e.target.files);
      setProduct({ ...product, images: files });
    };
  
    const handleSubmit = (e) => {
      e.preventDefault();
  
      const formData = new FormData();
      Object.keys(product).forEach((key) => {
        if (key === "images") {
          product[key].forEach((file) => formData.append("images", file));
        } else if (key === "tags") {
          formData.append(key, JSON.stringify(product[key]));
        } else {
          formData.append(key, product[key]);
        }
      });
  
      dispatch(createProduct(formData)).then(() => {
        navigate("/"); // Navigate to home after product creation
      });
    };
  
    return (
      <div className="container">
        <h2 className="mb-4">Create Product</h2>
        <form onSubmit={handleSubmit} encType="multipart/form-data">
          <div className="row mb-3">
            <div className="col-md-6">
              <label htmlFor="name" className="form-label">Name</label>
              <input
                type="text"
                name="name"
                className="form-control"
                onChange={handleChange}
                value={product.name}
                required
              />
            </div>
            <div className="col-md-6">
              <label htmlFor="description" className="form-label">Description</label>
              <input
                type="text"
                name="description"
                className="form-control"
                onChange={handleChange}
                value={product.description}
                required
              />
            </div>
          </div>
          <div className="row mb-3">
            <div className="col-md-6">
              <label htmlFor="price" className="form-label">Price</label>
              <input
                type="number"
                name="price"
                className="form-control"
                onChange={handleChange}
                value={product.price}
                required
              />
            </div>
            <div className="col-md-6">
              <label htmlFor="category" className="form-label">Category</label>
              <input
                type="text"
                name="category"
                className="form-control"
                onChange={handleChange}
                value={product.category}
                required
              />
            </div>
          </div>
          <div className="row mb-3">
            <div className="col-md-6">
              <div className="form-check">
                <input
                  type="checkbox"
                  className="form-check-input"
                  id="inStock"
                  name="inStock"
                  checked={product.inStock}
                  onChange={handleChange}
                />
                <label className="form-check-label" htmlFor="inStock">In Stock</label>
              </div>
            </div>
            <div className="col-md-6">
              <div className="form-check">
                <input
                  type="checkbox"
                  className="form-check-input"
                  id="isFeatured"
                  name="isFeatured"
                  checked={product.isFeatured}
                  onChange={handleChange}
                />
                <label className="form-check-label" htmlFor="isFeatured">Featured</label>
              </div>
            </div>
          </div>
          <div className="mb-3">
            <label htmlFor="tags" className="form-label">Tags (comma-separated)</label>
            <input
              type="text"
              name="tags"
              className="form-control"
              onChange={handleChange}
              value={product.tags.join(",")}
            />
          </div>
          <div className="row mb-3">
            <div className="col-md-6">
              <label htmlFor="images" className="form-label">Image Upload</label>
              <input
                type="file"
                name="images"
                className="form-control"
                onChange={handleImageChange}
                multiple
              />
            </div>
          </div>
          <button type="submit" className="btn btn-primary">Submit</button>
        </form>
      </div>
    );
  };
  
  export default CreateProducts;
